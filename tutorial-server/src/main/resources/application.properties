spring.application.name=tutorial-app
server.port=8080
#------ h2 --------
#spring.datasource.jdbc-url=jdbc:h2:file:./data/demo
#spring.datasource.driverClassName=org.h2.Driver
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#spring.h2.console.settings.trace=false
#spring.h2.console.settings.web-allow-others=false
#----- mysql ------
spring.datasource.jdbc-url=jdbc:mysql://localhost:4306/chefstory?allowPublicKeyRetrieval=true&useSSL=false
#------------------
spring.datasource.username=chef1
spring.datasource.password=chef1
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
management.endpoints.web.exposure.include=*
logging.level.org.springframework.web.client.RestTemplate=INFO
logging.level.org.springframework.web=INFO

# set below to DEBUG for working.
#logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=INFO
# set below to TRACE for working.
#logging.level.org.zalando.logbook=INFO
# For detailed logging during development
#logging.level.com=TRACE
#logging.level.org.springframework=TRACE
#logging.level.org.hibernate.SQL=TRACE
#logging.level.org.hibernate.type=TRACE



#--------
# Database configuration props
#spring.datasource.url=jdbc:mysql://localhost:3306/demo?createDatabaseIfNotExist=true
#spring.datasource.username=root
#spring.datasource.password=secret
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate props
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

# Social login provider props
spring.security.oauth2.client.registration.google.clientId=929314170651-f6us9q7g90pn6dq703nopkov61vnrklb.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=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
spring.security.oauth2.client.registration.facebook.clientId=<your-client-id>
spring.security.oauth2.client.registration.facebook.clientSecret=<your-client-secret>
spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,name,email,picture
spring.security.oauth2.client.registration.github.clientId=<your-client-id>
spring.security.oauth2.client.registration.github.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.linkedin.clientId=<your-client-id>
spring.security.oauth2.client.registration.linkedin.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.linkedin.client-authentication-method=post
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile, r_emailaddress
spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.linkedin.client-name=Linkedin
spring.security.oauth2.client.registration.linkedin.provider=linkedin
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.user-name-attribute=id
linkedin.email-address-uri=https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))

app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:8081/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect

